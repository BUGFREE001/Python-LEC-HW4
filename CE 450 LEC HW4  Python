#1

global bal

def mk_wd(balance):
    global bal
    bal=balance
    def withdrawal(n):
        global bal
        if bal-n<0:
            print('Insufficient funds')
        else:
            bal=bal-n
            print(bal)
    return withdrawal
    
rem = mk_wd (100)
rem(10)
rem(20)
rem (100)


-------------------------------------------------------------------------------------------------------------------------------------


#2

def rm_all(elem, lst):
    i=0
    while i < len(lst):
        if lst[i]==elem:
            del lst[i]
        else:
            i+=1
            
x = [3, 1, 2, 1, 5, 1, 1, 7]      
rm_all (1, x)
print(x)


-------------------------------------------------------------------------------------------------------------------------------------


#3

def add_many(x, elem, lst):
    for i in range(x):
        lst.append(elem)
            
lst = [1, 2, 4, 2, 1]     
add_many (2, 5, lst)
print(lst)


-------------------------------------------------------------------------------------------------------------------------------------


#4

def f (suits, numbers):
    res=[]
    for i in suits:
        for j in numbers:
            res.append([i,j])
    return res        
    
print(f(['S', 'C'], [1, 2, 3]))    
print(f (['S', 'C'], [3, 2, 1]))
print(f ([], [3, 2, 1]))
print(f (['S', 'C'], []))

-------------------------------------------------------------------------------------------------------------------------------------
        
#5

def mrg(ls1, ls2):
    res= []
    
    if len(ls1)==0:
        res=ls2[:]
        return res
        
    if len(ls2)==0:
        res=ls1[:]
        return res 
    
    if ls1[0]<ls2[0]:
        res.append(ls1[0])
        return res + mrg(ls1[1:], ls2)
    
    else:
        res.append(ls2[0])
        return res + mrg(ls1, ls2[1:])
        
        
x=[1, 3, 5] 
y=[2, 4, 6]
print(mrg (x, y))
print(x)
print(y)    


-------------------------------------------------------------------------------------------------------------------------------------


#6

def fltn(ls):
    res=[]
    for i in ls:
        if isinstance(i, int):
            res.append(i)
        else:
            res+=fltn(i)
    return res        
        
print(fltn ([1, 2, 3]))  
x = [1, [2, 3], 4]
print(fltn(x))
y=[[1, [1, 1]], 1, [1, 1]]
print(fltn(y))



-------------------------------------------------------------------------------------------------------------------------------------


#7

def chk_elm(lst, n):
    for i in lst:
        if isinstance(i, int):
            if i==n:
                return True
        else:
            if chk_elm(i, n):
                return True
    return False

a = [ [1,[2]], 3, [ [4], [5,[6] ] ] ]
print(chk_elm (a, 4))


-------------------------------------------------------------------------------------------------------------------------------------


#8

def sym_helper(l,s,e):
    if s>=e:
        return True
    if l[s]!=l[e]:   
        return False
    return sym_helper(l,s+1,e-1)    
    
def sym(l):
    if len(l)<=1:
        return True
    return sym_helper(l,0,len(l)-1)    
    
    
print(sym ([]))
print(sym ([1]))
print(sym ([1, 4, 5, 1]))
print(sym ([1, 4, 4, 1]))
print(sym (['l', 'o', 'l']))
    
    
-------------------------------------------------------------------------------------------------------------------------------------    
    
#9

def add(x,y):
    return x+y
    

def fld (lst, g, m):
    res=m
    for i in lst:
        res=g(res,i)
    return res
    
s = [3, 2, 1]   
print(fld (s, add, 0))     


-------------------------------------------------------------------------------------------------------------------------------------


#10

def create_2d_arr(rows, columns):
    res=[]
    for i in range(rows):
        r=[]
        for j in range(columns):
            r.append('-')
        res.append(r)
    return res
    
print(create_2d_arr (3, 5))    
